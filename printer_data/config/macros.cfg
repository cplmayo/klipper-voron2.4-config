# Included Macros
[include build-sheets.cfg]
[include filaments.cfg]
[include neopixels.cfg]
[include part-cooling.cfg]
[include heatsoak.cfg]
[include testMovementNoise.cfg]
[include nevermore.cfg]

#####################################################################
#   Macros
#####################################################################

## Every Build Plate you want to use needs an Install Macro
[gcode_macro INSTALL_TEXTURED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="Textured PEI"

[gcode_macro INSTALL_WHAM_BAM]
gcode:
    INSTALL_BUILD_SHEET NAME="Wham Bam"

[gcode_macro PARK_REAR]
gcode:
    SAVE_GCODE_STATE NAME=PARK_REAR
    ; park the head at the front of the printer
    G90
    G1 X175 Y350 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_REAR

[gcode_macro PARK_CENTER]
gcode:
    SAVE_GCODE_STATE NAME=PARK_CENTER
    ; park the head at the front of the printer
    G90
    G1 X175 Y175 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro PARK_FRONT]
gcode:
    SAVE_GCODE_STATE NAME=PARK_FRONT
    ; park the head at the front of the printer
    G90
    G1 X175 Y10 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_FRONT

[gcode_macro SAFE_LIFT_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro PRINT_AREA_BED_MESH_CALIBRATE]
description: Sets the bed mesh area based on the size & location of the print
gcode:
    # defaults from bed_mesh
    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set bed_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set bed_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set bed_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set bed_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
    {% set max_probe_count_x = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% set max_probe_count_y = bedMeshConfig.probe_count.split(",")[1]|int %}
    # user parameters
    {% set area_min_x = params.PRINT_START_X|default(bed_min_x)|float %}
    {% set area_min_y = params.PRINT_START_Y|default(bed_min_y)|float %}
    {% set area_max_x = params.PRINT_END_X|default(bed_max_x)|float %}
    {% set area_max_y = params.PRINT_END_Y|default(bed_max_y)|float %}
    {% set mesh_area_padding = params.MESH_ARE_PADDING|default(5.0)|float %}
    {% set min_probe_count_x = params.MIN_PROBE_COUNT_X|default(3)|int %}
    {% set min_probe_count_y = params.MIN_PROBE_COUNT_Y|default(3)|int %}

    # add padding to the print area if possible
    {% set area_min_x = [area_min_x - mesh_area_padding, bed_min_x]|max %}
    {% set area_min_y = [area_min_y - mesh_area_padding, bed_min_y]|max %}
    {% set area_max_x = [area_max_x + mesh_area_padding, bed_max_x]|min %}
    {% set area_max_y = [area_max_y + mesh_area_padding, bed_max_y]|min %}

    # compute raw scaled values for the probe counts from 0 to max_probe_count_x/y
    {% set probe_count_unscaled_x = ((area_max_x - area_min_x)/bed_max_x) * max_probe_count_x|float %}
    {% set probe_count_unscaled_y = ((area_max_y - area_min_y)/bed_max_y) * max_probe_count_y|float %}

    # scale those values up from: 0 - min_probe_count_x/y to the scale: min_probe_count_x/y - min_probe_count_x/y
    {% set probe_count_x = ((max_probe_count_x - min_probe_count_x) * probe_count_unscaled_x / max_probe_count_x + min_probe_count_x)|round|int %}
    {% set probe_count_y = ((max_probe_count_y - min_probe_count_y) * probe_count_unscaled_y / max_probe_count_y + min_probe_count_y)|round|int %}

    {% set relative_reference_index = (((probe_count_x * probe_count_y) - 1) / 2)|int %}

    BED_MESH_CALIBRATE MESH_MIN={area_min_x},{area_min_y} MESH_MAX={area_max_x},{area_max_y} PROBE_COUNT={("%d,%d" % (probe_count_x,probe_count_y))} RELATIVE_REFERENCE_INDEX={relative_reference_index}

[gcode_macro PURGE_LINE]
gcode:
    SAVE_GCODE_STATE NAME=PURGE_LINE
    {% set purge_start_x = params.PRINT_START_X|default(5.0)|float %}
    {% set purge_start_y = params.PRINT_START_Y|default(-5.0)|float %}

    ; purge/prime nozzle
    G90 ; use absolute coordinates
    ; go to the start of the print area, but -5 in Y
    G1 X{purge_start_x} Y{purge_start_y} Z0.3 F7200.0 ; go to the purge start location
    G91 ; relative coordinates
    M83 ; extruder relative mode
    G92 E0.0
    G1 X40.0 E10.0 F1000.0  ; narrow start line
    G1 X40.0 E15.0 F1000.0  ; priming thick outro line
    G92 E0.0
    G1 X3.0 Y3.0 F1000.0    ; move the nozzle away from the end of the purge line so the print doesnt drage the nozzle back throught it.
    G1 F7200.0

    RESTORE_GCODE_STATE NAME=PURGE_LINE

[gcode_macro G32]
gcode:
    STATUS_HOMING
    BED_MESH_CLEAR

    ; stealth chop tuning process
    # motors off
    ;M84
    ;G4 P200

    # enable motors (this seems to energize the steppers in Klipper and no micro-moves are needed)
    ; SET_STEPPER_ENABLE STEPPER=stepper_x  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_y  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    #wait at least 130ms for StealthChop to sense standstill current
    ;G4 P200

    #now proceed to home as normal
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28

[gcode_macro PRINT_WARMUP]
description: Perform initial homing and heating tasks
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set CHAMBER_TEMP = params.BED_CHAMBER|default(0)|float %}

    CLEAR_PAUSE
    SHOW_BUILD_SHEET

    m104 S150                              ; set extruder temperature below 155 for Tap
    M140 S{BED_TEMP}                       ; set bed temprature
    M106 S255                              ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up
    SET_FAN_SPEED FAN=Nevermore SPEED=0.5  ; Set Nevermore Fan to 50%
    G32                                    ; home all axes
    STATUS_HEATING
    PARK_CENTER                            ; place tool head in the middle of the print volume for even frame heating

    # wait for top bed sensor to be in thermal equilibrium:
    HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER="temperature_sensor build_surface" CANCEL='CANCEL_PRINT'

[gcode_macro _PRINT_WARMUP]
variable_bed_temp: 0
variable_extruder_temp: 0
gcode:
    {% set warmup = printer['gcode_macro _PRINT_WARMUP'] %}
    PRINT_WARMUP EXTRUDER_TEMP={warmup.extruder_temp} BED_TEMP={warmup.bed_temp}

[gcode_macro PRINT_START]
description: perform calibration and get ready to print
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
variable_parameter_PRINT_START_X : 0
variable_parameter_PRINT_START_Y : 0
variable_parameter_PRINT_END_X : 0
variable_parameter_PRINT_END_Y : 0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    # TODO: get this value from the Probe x_offset (x_offset + 2x mesh padding + 1)
    {% set safe_max_x = 350 - 54 %}
    {% set start_x = params.PRINT_START_X|default(0)|float %}
    {% set start_y = params.PRINT_START_Y|default(0)|float %}
    {% set end_x = params.PRINT_END_X|default(350.0)|float %}
    {% set end_y = params.PRINT_END_Y|default(350.0)|float %}
    # Enlarge the start area as needed to contain the purge line:
    {% set start_x = [start_x, safe_max_x]|min %}
    {% set end_x   = [end_x, safe_max_x]|min %}
    {% set start_y = start_y - 5 %}

    CLEAR_PAUSE
    SHOW_BUILD_SHEET

    #######
    # This section is a duplicate of what happens in the warmup to guard against old prints that only call PRINT_START
    # generally the printer will pass through this almost instantly
    M104 S150
    M140 S{BED_TEMP}                    ; set bed temprature
    M106 S255                           ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G32                             ; home all axes if not homed
    {% endif %}
    # wait for bed to reach temperature
    STATUS_HEATING
    M190 S{BED_TEMP}
    #######

    # mesh bed level
    STATUS_MESHING
    PRINT_AREA_BED_MESH_CALIBRATE PRINT_START_X={start_x} PRINT_START_Y={start_y} PRINT_END_X={end_x} PRINT_END_Y={end_y}
    # calibrate Klicky probe Z
    status_calibrating_z
    SET_GCODE_OFFSET Z=0.0
    APPLY_BUILD_SHEET_ADJUSTMENT
    ; move to the front of the printer to allow user to remove any oozing
    SAFE_LIFT_Z Z=25 F=3000
    PARK_FRONT                          ; Move tool head to front to facilitate ooze cleanup
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}               ; Wait for nozzle to finish heating
    M106 S0                             ; Done waiting, part cooling off and back to slicer control
    SHOW_BUILD_SHEET
    STATUS_PRINTING
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    PURGE_LINE PRINT_START_X={start_x} PRINT_START_Y={start_y}
    ; if a callback was supplied to print_start, call it
    {% set print_start_macro = printer['gcode_macro PRINT_START'] %}
    {% if print_start_macro.callback  %}
        {print_start_macro.callback}
    {% endif %}

[gcode_macro _PRINT_START]
variable_bed_temp: 0
variable_extruder_temp: 0
variable_print_start_x: 0
variable_print_start_y: 0
variable_print_end_x: 0
variable_print_end_y: 0
gcode:
  {% set start = printer['gcode_macro _PRINT_START'] %}
  PRINT_START EXTRUDER_TEMP={start.extruder_temp} BED_TEMP={start.bed_temp} PRINT_START_X={start.print_start_x} PRINT_START_Y={start.print_start_y} PRINT_END_X={start.print_end_x} PRINT_END_Y={start.print_end_y}

[gcode_macro _SETUP_PRINT_START]
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
variable_parameter_PRINT_START_X : 0
variable_parameter_PRINT_START_Y : 0
variable_parameter_PRINT_END_X : 0
variable_parameter_PRINT_END_Y : 0
gcode:
    # configure _PRINT_WARMUP variables
    SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=bed_temp VALUE={params.BED_TEMP}

    # configure print start
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=bed_temp VALUE={params.BED_TEMP}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=print_start_x VALUE={params.PRINT_START_X}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=print_start_y VALUE={params.PRINT_START_Y}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=print_end_x VALUE={params.PRINT_END_X}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=print_end_y VALUE={params.PRINT_END_X}

[gcode_macro PRINT_END]
description: tasks to rese the printer state and cool everything down.
gcode:
    M400                           ; wait for move buffer to clear
    G92 E0                         ; zero the extruder
    G91                            ; relative positioning
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    STATUS_OFF
    BED_MESH_CLEAR
    #SET_Z_THERMAL_ADJUST ENABLE=0
    SAFE_LIFT_Z Z=10 F=3000.0
    PARK_REAR
    STATUS_OFF
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    # TODO: it would be nice to keep the part cooling fan on until the hot end fan shuts off.

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    STOP_HEAT_SOAK
    TURN_OFF_HEATERS
    M107
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    SAFE_LIFT_Z Z=10 F=3000.0
    PARK_REAR
    STATUS_OFF
    BED_MESH_CLEAR
    #SET_Z_THERMAL_ADJUST ENABLE=0
    BASE_CANCEL_PRINT

; catch M600 from Prusa Slicer to allow a manual color change
[gcode_macro M600]
gcode:
    PAUSE
    # TODO: add retract here
    SAFE_LIFT_Z Z=10 F=3000.0
    PARK_FRONT

[gcode_macro PID_CALIBRATE_EXTRUDER]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1

[gcode_macro PID_CALIBRATE_HEATER_BED]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1

[gcode_macro TEST_PROBE_Z_CORNERS]
gcode:
    SAVE_GCODE_STATE NAME=TEST_PROBE_CORNERS
    G90
    G0 X93 Y25 F18000
    PROBE_ACCURACY
    G0 X93 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y25 F18000
    PROBE_ACCURACY
    RESTORE_GCODE_STATE NAME=TEST_PROBE_CORNERS

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro DUMP_PAUSE_STATE]
gcode:
   {action_respond_info("[pause_resume].is_paused = %s" % (printer['pause_resume'].is_paused | string)) }
   {action_respond_info("[virtual_sdcard] = %s" % (printer['virtual_sdcard'] | pprint | string)) }
   

[gcode_macro DUMP_SAVE_VARIABLES]
gcode:
    {% for name2 in printer["save_variables"] %}
        { action_respond_info("printer['%s'].%s = %s" % ("save_variables", name2, printer["save_variables"][name2])) }
    {% else %}
        { action_respond_info("printer['%s'] = %s" % ("save_variables", printer["save_variables"])) }
    {% endfor %}

# this needs access to print start etc.
[include pa-cal.cfg]

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    {% set speed = params.SPEED | default(5 * 60) %}
    {% set purge_distance = params.PURGE | default(75) %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E50 F{speed}
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% set pull_speed = params.PULL_SPEED | default(5 * 60) %}
    {% set pull_distance = ((params.PULL_DISTANCE | default(15)) | float ) * -1 %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    {% set retract_speed = params.RETRACT_SPEED | default(max_velocity) %}
    {% set retract_distance = ((params.RETRACT_DISTANCE | default(30)) | float) * -1 %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E{pull_distance} F{pull_speed}
    G1 E{retract_distance} F{retract_speed}
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro PETG]
gcode:
    SET_FILAMENT NAME="PETG"

[gcode_macro PLA]
gcode:
    SET_FILAMENT NAME="PLA"

[gcode_macro ASA]
gcode:
    SET_FILAMENT NAME="ASA"

[gcode_macro PC]
gcode:
    SET_FILAMENT NAME="PC"

[gcode_macro PVB]
gcode:
    SET_FILAMENT NAME="PVB"

[gcode_macro ABS]
gcode:
    SET_FILAMENT NAME="ABS"

[gcode_macro HIPS]
gcode:
    SET_FILAMENT NAME="HIPS"

[gcode_macro PP]
gcode:
    SET_FILAMENT NAME="PP"

[gcode_macro FLEX]
gcode:
    SET_FILAMENT NAME="FLEX"

[gcode_macro WARM_UP_NOZZLE]
gcode:
    PREHEAT_EXTRUDER

[gcode_macro WARM_UP_BED]
gcode:
    PREHEAT_BED

[gcode_macro FREEZE]
gcode:
    TURN_OFF_HEATERS
